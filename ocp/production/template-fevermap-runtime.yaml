---

apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}
  template: fevermap-mysql-runtime
message: |-
  The following service(s) have been created in your project: ${NAME}-app
  ${NAME}-api, ${DATABASE_SERVICE_NAME}.

  For more information about using this template, including OpenShift
  considerations, see
  https://gitlab.com/fevermap/fevermap/-/blob/master/ocp/README.md.
metadata:
  annotations:
    description:
      An example Fevermap application with a MariaDB database. For more
      information about using this template, including OpenShift considerations,
      see https://gitlab.com/fevermap/fevermap/-/blob/master/ocp/README.md.
    iconClass: icon-python
    openshift.io/display-name: Fevermap
    openshift.io/documentation-url: >-
      https://gitlab.com/fevermap/fevermap/-/blob/master/ocp/README.md
    openshift.io/long-description: This template defines resources needed to run
      a Fevermap application, application deployment configurations, and
      database deployment configuration.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://gitlab.com/fevermap/fevermap/-/issues
    samples.operator.openshift.io/version: "0.1"
    tags: quickstart,fevermap,python,nginx,mariadb
    template.openshift.io/bindable: "false"
  labels:
    samples.operator.openshift.io/managed: "false"
  name: fevermap-mysql-runtime
parameters:
  - description: The name prefix assigned to frontend objects defined in this
      template.
    displayName: Name
    name: NAME
    required: true
    value: fevermap-mysql-persistent
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: fevermap
  - description: The front-end container image pull URL.
    displayName: Front Image URL
    name: APP_IMG_URL
    required: true
    value: quay.io/fevermap/fevermap-app
  - description: Version of front image to be used (release-tag or latest).
    displayName: Front-end image Version
    name: APP_VERSION
    required: false
    value: "latest"
  - description: The API container image pull URL.
    displayName: API Image URL
    name: API_IMG_URL
    required: true
    value: quay.io/fevermap/fevermap-api
  - description: Version of API image to be used (release-tag or latest).
    displayName: API image Version
    name: API_VERSION
    required: false
    value: "latest"
  - description: The Push API container image pull URL.
    displayName: Push API Image URL
    name: PUSH_API_IMG_URL
    required: true
    value: quay.io/fevermap/fevermap-api
  - description: Maximum amount of memory the push api container can use.
    displayName: Memory Limit push api
    name: MEMORY_PUSH_API_LIMIT
    required: true
    value: 256Mi
  - description: Version of API image to be used (release-tag or latest).
    displayName: Push API image Version
    name: PUSH_API_VERSION
    required: false
    value: "latest"
  - description: Maximum amount of memory the frontend container can use.
    displayName: Memory Limit Frontned
    name: MEMORY_APP_LIMIT
    required: true
    value: 256Mi
  - description: Maximum amount of memory the API container can use.
    displayName: Memory Limit API
    name: MEMORY_API_LIMIT
    required: true
    value: 256Mi
  - description: Maximum amount of memory the MySQL container can use.
    displayName: Memory Limit (MySQL)
    name: MEMORY_MYSQL_LIMIT
    required: true
    value: 2Gi
  - description: Volume space available for data, e.g. 512Mi, 2Gi
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - description:
      The exposed hostname that will route to the Fevermap frontend service,
      if left blank a value will be defaulted.
    displayName: Application Frontend Hostname
    name: APPLICATION_APP_DOMAIN
  - description:
      The exposed hostname that will route to the Fevermap API service,
      if left blank a value will be defaulted.
    displayName: Application API Hostname
    name: APPLICATION_API_DOMAIN
  - description:
      The exposed http path part that will route to the Fevermap API service,
      can be left blank if no path is used. E.g. /api
    displayName: Application API path
    name: APPLICATION_API_PATH
  - description:
      The exposed hostname that will route to the Fevermap Push API service,
      if left blank a value will be defaulted.
    displayName: Application API Hostname
    name: APPLICATION_PUSH_API_DOMAIN
  - description:
      Google Analytics property ID. Add this to activate Google Analytics,
      otherwise leave empty to not use GA.
    displayName: Google analytics property ID
    name: GOOGLE_ANALYTICS_CODE
  - description:
      GitLab trigger secret.  A difficult to guess string encoded as part
      of the webhook URL.  Not encrypted.
    displayName: GitLab Webhook Secret
    from: "[a-zA-Z0-9]{40}"
    generate: expression
    name: GITLAB_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: mariadb
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: fevermap
  - displayName: Database User
    name: DATABASE_USER
    required: true
    value: fevermap
  - displayName: Database Password
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: DATABASE_PASSWORD
  - displayName: Database Root Password
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: DATABASE_ROOT_PASSWORD
objects:
  #
  # Database
  #
  - apiVersion: v1
    stringData:
      database-name: ${DATABASE_NAME}
      database-password: ${DATABASE_PASSWORD}
      database-root-password: c${DATABASE_ROOT_PASSWORD}
      database-user: ${DATABASE_USER}
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: "{.data['database-name']}"
        template.openshift.io/expose-password: "{.data['database-password']}"
        template.openshift.io/expose-root_password: >-
          "{.data['database-root-password']}"
        template.openshift.io/expose-username: "{.data['database-user']}"
      name: ${NAME}-db
    type: Opaque
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      finalizers:
        - kubernetes.io/pvc-protection
      name: ${NAME}-mariadb-storage
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      creationTimestamp: null
      generation: 1
      labels:
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: ${NAME}-db
        app.kubernetes.io/name: mariadb
        app.kubernetes.io/part-of: fevermap
        app.openshift.io/runtime: mariadb
      name: ${NAME}-db
    spec:
      replicas: 1
      revisionHistoryLimit: 5
      selector:
        deploymentconfig: ${NAME}-db
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          timeoutSeconds: 600
        type: Recreate
      template:
        metadata:
          creationTimestamp: null
          name: ${NAME}-db
          labels:
            deploymentconfig: ${NAME}-db
        spec:
          containers:
            - env:
                - name: MYSQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${NAME}-db
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${NAME}-db
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-root-password
                      name: ${NAME}-db
                - name: MYSQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${NAME}-db
              image: openshift/mariadb@latest
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 3306
                timeoutSeconds: 1
              name: mariadb
              ports:
                - containerPort: 3306
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -i
                    - -c
                    - >-
                      MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1
                      -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  memory: ${MEMORY_MYSQL_LIMIT}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/lib/mysql/data
                  name: ${NAME}-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - name: ${NAME}-data
              persistentVolumeClaim:
                claimName: ${NAME}-mariadb-storage
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - mariadb
            from:
              kind: ImageStreamTag
              name: mariadb:10.2
              namespace: openshift
          type: ImageChange
        - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: >-
          mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mariadb")].port}
      labels:
        app.kubernetes.io/component: ${NAME}-db
        app.kubernetes.io/instance: ${NAME}-db
        app.kubernetes.io/name: "${NAME}-db"
        app.kubernetes.io/part-of: ${NAME}
      name: ${NAME}-db
    spec:
      ports:
        - name: mariadb
          port: 3306
          protocol: TCP
          targetPort: 3306
      selector:
        deploymentconfig: ${NAME}-db
      sessionAffinity: None
      type: ClusterIP
  #
  # API
  #
  - apiVersion: v1
    stringData:
      database-uri: "mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@${NAME}-db/\
        ${DATABASE_NAME}?charset=utf8mb4"
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: "{.data['database-uri']}"
      name: ${NAME}-api-db
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      name: ${NAME}-api
      annotations:
        description: Runtime image for API
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      lookupPolicy:
        local: false
      tags:
        - annotations: null
          from:
            kind: DockerImage
            name: ${API_IMG_URL}:${API_VERSION}
          name: latest
          referencePolicy:
            type: Source
  - apiVersion: v1
    data:
      entrypoint.sh: |
        #!/bin/bash
        set -e

        # Turn on bash's job control so we can spawn subcommands
        set -m

        # https://flask.palletsprojects.com/en/1.1.x/cli/
        export FLASK_APP="fevermap"

        # Default to development if nothing is set
        if [ -z "$FLASK_ENV" ]
        then
          export FLASK_ENV="development"
        fi

        export PYTHONPATH="${APPDIR}:${PYTHONPATH}"
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8

        uwsgi \
            --module=fevermap.wsgi:application \
            --master \
            --processes=5 \
            --threads=2 \
            --set-placeholder="base=${APPDIR}" \
            --chdir="%(base)" \
            --http-socket="0.0.0.0:9000" \
            --uid="$(id -un)" \
            --gid="$(id -gn)" \
            --vacuum \
            --die-on-term \
            --env="LC_ALL=C.UTF-8" \
            --env="LANG=C.UTF-8" \
            --disable-logging
    kind: ConfigMap
    metadata:
      name: ${NAME}-api-uwsgi-starter
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations:
        app.openshift.io/connects-to: ${NAME}-db
      labels:
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: ${NAME}-api
        app.kubernetes.io/name: python
        app.kubernetes.io/part-of: fevermap
        app.openshift.io/runtime: python
        app.openshift.io/runtime-version: "3.6"
      name: ${NAME}-api
    spec:
      replicas: 2
      revisionHistoryLimit: 5
      selector:
        deploymentconfig: ${NAME}-api
      strategy:
        activeDeadlineSeconds: 21600
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          creationTimestamp: null
          labels:
            deploymentconfig: ${NAME}-api
          name: ${name}-api
        spec:
          containers:
            - env:
                - name: FEVERMAP_API_DATABASE_URI
                  valueFrom:
                    secretKeyRef:
                      key: database-uri
                      name: ${NAME}-api-db
                - name: FLASK_ENV
                  value: kube
                - name: APP_SCRIPT
                  value: entrypoint.sh
                - name: APPDIR
                  value: /opt/app-root/src
                - name: UWSGIPLUGINLINE
              image: ${NAME}-api:latest
              imagePullPolicy: IfNotPresent
              name: ${NAME}-api
              ports:
                - containerPort: 9000
                  protocol: TCP
              resources:
                limits:
                  memory: ${MEMORY_API_LIMIT}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                httpGet:
                  path: /ping
                  port: 9000
                  scheme: HTTP
                initialDelaySeconds: 5
                timeoutSeconds: 2
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              livenessProbe:
                httpGet:
                  path: /ping
                  port: 9000
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 3
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              volumeMounts:
                - mountPath: /opt/app-root/src/entrypoint.sh
                  name: uwsgi-starter
                  readOnly: true
                  subPath: entrypoint.sh
          volumes:
            - configMap:
                defaultMode: 0550
                name: ${NAME}-api-uwsgi-starter
              name: uwsgi-starter
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}-api
            from:
              kind: ImageStreamTag
              name: ${NAME}-api:latest
          type: ImageChange
        - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: ${NAME}
        app.kubernetes.io/name: python
        app.kubernetes.io/part-of: fevermap
      name: ${NAME}-api
    spec:
      ports:
        - name: 9000-tcp
          port: 9000
          protocol: TCP
          targetPort: 9000
      sessionAffinity: None
      type: ClusterIP
      selector:
        deploymentconfig: ${NAME}-api
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: ${NAME}-api
    spec:
      host: ${APPLICATION_API_DOMAIN}
      path: ${APPLICATION_API_PATH}
      port:
        targetPort: 9000-tcp
      tls:
        insecureEdgeTerminationPolicy: Allow
        termination: edge
      to:
        kind: Service
        name: ${NAME}-api
        weight: 100
      wildcardPolicy: None
  #
  # Front
  #
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      name: ${NAME}-app
      annotations:
        description: The final run-time image for frontend
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      lookupPolicy:
        local: false
      tags:
        - annotations: null
          from:
            kind: DockerImage
            name: ${APP_IMG_URL}:${APP_VERSION}
          name: latest
          referencePolicy:
            type: Source
  - apiVersion: v1
    data:
      window-settings.js: |+
        window.URLS = {
            API_URL: 'https://${APPLICATION_API_DOMAIN}',
            APP_URL: 'https://${APPLICATION_APP_DOMAIN}',
        };
        window.GOOGLE_ANALYTICS_CODE='${GOOGLE_ANALYTICS_CODE}';

    kind: ConfigMap
    metadata:
      name: ${NAME}-window-settings
  - apiVersion: v1
    data:
      apm-monitoring.js: ''
    kind: ConfigMap
    metadata:
      name: ${NAME}-app-apm-monitoring
  - apiVersion: v1
    data:
      liveness.conf: |2

        map $http_user_agent $log_ua {

            ~kube-probe 0;
            ~Pingdom 0;

            default 1;
        }

        server {
            listen       8081 default_server;
            listen       [::]:8081 default_server;
            server_name  _;
            root         /opt/app-root/src;

            access_log /var/log/nginx/access.log main if=$log_ua;

            location / {
            }

            error_page 404 /404.html;
            location = /40x.html {
            }

            error_page 500 502 503 504  /50x.html;
            location = /50x.html {
            }
        }
    kind: ConfigMap
    metadata:
      name: ${NAME}-app-nginx-liveness
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app.kubernetes.io/component: app
        app.kubernetes.io/instance: ${NAME}-app
        app.kubernetes.io/name: nginx
        app.kubernetes.io/part-of: fevermap
        app.openshift.io/runtime: nginx
        app.openshift.io/runtime-version: "1.12"
      name: ${NAME}-app
    spec:
      replicas: 2
      revisionHistoryLimit: 10
      selector:
        deploymentconfig: ${NAME}-app
      strategy:
        activeDeadlineSeconds: 21600
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            deploymentconfig: ${NAME}-app
        spec:
          containers:
            - image: ${NAME}-app:latest
              imagePullPolicy: Always
              name: ${NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 8081
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /window-settings.js
                  port: 8081
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 2
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /window-settings.js
                  port: 8081
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 2
              resources:
                limits:
                  memory: ${MEMORY_APP_LIMIT}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/app-root/src/window-settings.js
                  name: ${NAME}-window-settings
                  readOnly: true
                  subPath: window-settings.js
                - mountPath: /opt/app-root/etc/nginx.d/liveness.conf
                  name: liveness-conf
                  readOnly: true
                  subPath: liveness.conf
                - mountPath: /opt/app-root/src/apm-monitoring.js
                  name: apm-monitoring
                  readOnly: true
                  subPath: apm-monitoring.js
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                defaultMode: 420
                name: ${NAME}-window-settings
              name: ${NAME}-window-settings
            - configMap:
                defaultMode: 0444
                name: ${NAME}-app-nginx-liveness
              name: liveness-conf
            - configMap:
                defaultMode: 420
                name: ${NAME}-app-apm-monitoring
              name: apm-monitoring
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-app:latest
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${NAME}-app
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${NAME}-app
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: ${NAME}
    spec:
      host: ${APPLICATION_APP_DOMAIN}
      port:
        targetPort: 8080-tcp
      tls:
        insecureEdgeTerminationPolicy: Allow
        termination: edge
      to:
        kind: Service
        name: ${NAME}-app
        weight: 100
      wildcardPolicy: None
  #
  # push API
  #
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      name: ${NAME}-push-api
      annotations:
        description: The run-time image for push-api
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      lookupPolicy:
        local: false
      tags:
        - annotations: null
          from:
            kind: DockerImage
            name: ${PUSH_API_IMG_URL}:${PUSH_API_VERSION}
          name: latest
          referencePolicy:
            type: Source
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}
        app.kubernetes.io/component: ${NAME}-push-api
        app.kubernetes.io/instance: ${NAME}-push-api
        app.kubernetes.io/part-of: ${NAME}
        app.openshift.io/runtime: nodejs
        env: staging
      name: ${NAME}-push-api
    spec:
      replicas: 1
      revisionHistoryLimit: 5
      selector:
        app: ${NAME}-push-api
        deploymentconfig: ${NAME}-push-api
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
          creationTimestamp: null
          labels:
            app: ${NAME}-push-api
            deploymentconfig: ${NAME}-push-api
        spec:
          containers:
            - env:
                - name: GOOGLE_APPLICATION_CREDENTIALS
                  value: /opt/app-root/${NAME}-firebase-account-file.json
              image: ${PUSH_API_IMG_URL}:${PUSH_API_VERSION}
              imagePullPolicy: Always
              name: ${NAME}-push-api
              ports:
                - containerPort: 9001
                  protocol: TCP
              resources:
                limits:
                  memory: ${MEMORY_PUSH_API_LIMIT}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/app-root/${NAME}-firebase-account-file.json
                  name: volume-firebase
                  readOnly: true
                  subPath: ${NAME}-firebase-account-file.json
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - name: volume-firebase
              secret:
                defaultMode: 420
                items:
                  - key: ${NAME}-firebase-account-file.json
                    path: ${NAME}-firebase-account-file.json
                secretName: ${NAME}-firebase-account-file
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}-push-api
            from:
              kind: ImageStreamTag
              name: ${NAME}-push-api:${PUSH_API_VERSION}
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}
        app.kubernetes.io/component: ${NAME}-push-api
        app.kubernetes.io/part-of: ${NAME}
        env: staging
      name: ${NAME}-push-api
    spec:
      ports:
        - name: 9001-tcp
          port: 9001
          protocol: TCP
          targetPort: 9001
      selector:
        app: ${NAME}-push-api
        deploymentconfig: ${NAME}-push-api
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    data:
      ${NAME}-firebase-account-file.json: c2VjcmV0X3N0dWZmX2hlcmUKCg==
    kind: Secret
    metadata:
      labels:
        app: ${NAME}
        app.kubernetes.io/component: ${NAME}-push-api
        app.kubernetes.io/part-of: ${NAME}
        env: staging
      name: ${NAME}-firebase-account-file
    type: Opaque
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      creationTimestamp: null
      labels:
        app: ${NAME}
        app.kubernetes.io/component: ${NAME}-push-api
        app.kubernetes.io/part-of: ${NAME}
        env: production
      name: ${NAME}-push-api-staging
    spec:
      host: ${APPLICATION_PUSH_API_DOMAIN}
      port:
        targetPort: 9001-tcp
      to:
        kind: Service
        name: ${NAME}-push-api
        weight: 100
      wildcardPolicy: None
